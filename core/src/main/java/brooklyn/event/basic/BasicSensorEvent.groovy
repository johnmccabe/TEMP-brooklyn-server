package brooklyn.event.basic;

import static com.google.common.base.Preconditions.*
import com.google.common.base.Objects
import brooklyn.entity.Entity
import brooklyn.event.Sensor
import brooklyn.event.SensorEvent

/**
 * A {@link SensorEvent} containing data from a {@link Sensor} generated by an {@link Entity}.
 */
public class BasicSensorEvent<T> implements SensorEvent<T> {
    private final Sensor<T> sensor;
    private final Entity source;
    private final T value;
    private final long timestamp;
    
    public T getValue() { return value; }

    public Sensor<T> getSensor() { return sensor; }

    public Entity getSource() { return source; }

    public long getTimestamp() { return timestamp; }

    public BasicSensorEvent(Sensor<T> sensor, Entity source, T value, long timestamp=0) {
        this.sensor = checkNotNull(sensor, "sensor");
        this.source = checkNotNull(source, "source");
        this.value = value;

        if (timestamp > 0) {
            this.timestamp = timestamp;
        } else {
            this.timestamp = System.currentTimeMillis();
        }
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(sensor, source, value)
    }   

    /**
     * Any SensorEvents are equal if their sensor, source and value are equal.
     * Ignore timestamp for ease of use in unit tests.   
     */
    @Override
    public boolean equals(Object o) {
        if (!(o instanceof SensorEvent)) return false
        SensorEvent other = (SensorEvent) o;
        return Objects.equal(sensor, other.sensor) && Objects.equal(source, other.source) &&
                Objects.equal(value, other.value)
    }
    
    @Override
    public String toString() {
        return "${source}.$sensor=$value @ $timestamp"
    }
}
